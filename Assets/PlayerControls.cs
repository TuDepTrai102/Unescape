//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player Movement"",
            ""id"": ""dce34a54-c9c5-44ba-b713-8c0f842f8b1c"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""92ae31f7-85e5-4dd7-b125-bb0d063e9bdc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1aff4b4e-3ef6-4b52-9ed7-78daa84e2a72"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""259013f7-5a5e-4886-85ea-13cad4a2ce6f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""83bd304f-5ac9-466a-a604-077c62f8e2cc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""73808f63-22ad-4ccc-811a-075de5b56b14"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""aea26449-f5cb-4620-891c-4b7c46181c9d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f58c99f7-0511-4acd-ba97-e458149095e4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c57d70c0-a6af-40be-a040-17b2f1a77c1d"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player Actions"",
            ""id"": ""1485c7ae-448d-4e24-8753-62eea0f486bb"",
            ""actions"": [
                {
                    ""name"": ""Y"",
                    ""type"": ""Button"",
                    ""id"": ""102dc6e3-14ac-4380-9700-c2c82b270bc0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""F"",
                    ""type"": ""Button"",
                    ""id"": ""b0185793-d7a7-45a9-a62e-b5e7c5ee3451"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""0ae707e4-77c2-4ad3-8c2e-3d91a3ea45ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LShift"",
                    ""type"": ""Button"",
                    ""id"": ""0b7cf61a-be33-4ffd-a0f6-0b1524b8cce3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Space"",
                    ""type"": ""Button"",
                    ""id"": ""b8a4522d-f73e-4759-a62b-a086fe1025ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""C"",
                    ""type"": ""Button"",
                    ""id"": ""3e7ff9b8-218b-4278-988e-d7282d3cc36f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Z"",
                    ""type"": ""Button"",
                    ""id"": ""61de90d5-4071-41f6-9696-8a394ab42cac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""5833de60-ca38-4bac-8b2a-20dce963e1ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Tap X"",
                    ""type"": ""Button"",
                    ""id"": ""688f11e6-d478-4686-8a4e-02e8e08fc4a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold E"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6d901654-df58-40f4-b633-0dff59c0614e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""E"",
                    ""type"": ""Button"",
                    ""id"": ""c0069dae-3baf-4a42-b216-493da450c14e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Qued E"",
                    ""type"": ""Button"",
                    ""id"": ""bd27752c-c10d-4479-892f-1fbc314b82a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold T"",
                    ""type"": ""Button"",
                    ""id"": ""f45be2c9-3a0a-4290-8f25-e7c030092c88"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""T"",
                    ""type"": ""Button"",
                    ""id"": ""d9d8e3cc-168a-41ca-b026-bf53a3b0431b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lock On Target"",
                    ""type"": ""Button"",
                    ""id"": ""8d8a9209-50a4-4d21-b8a1-06b19c691a50"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""F1"",
                    ""type"": ""Button"",
                    ""id"": ""b17376ad-2e95-4674-8e11-564a0891334a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""F2"",
                    ""type"": ""Button"",
                    ""id"": ""1380cb20-35ab-4652-9983-8f4c32b6c01e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""_Hold Q"",
                    ""type"": ""Button"",
                    ""id"": ""7c00ed00-18ad-45d4-9f7b-239a0999aa60"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""_Q"",
                    ""type"": ""Button"",
                    ""id"": ""69bdc96e-68ff-4047-8ea7-dcd21d4cb068"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8e8146b8-85c7-4e7e-be28-971cdd27c589"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21ae283d-92d6-4ce7-a583-7b5c1ded7a3c"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""F"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""623f0a21-67b9-4b24-9823-ad84ec088d0d"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LShift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75270907-726a-448d-8444-bd319671c50d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1addbc01-7a4f-49a9-9d30-f953851076aa"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""C"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ca1207c-0434-4198-95d9-31bd44594576"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Z"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f76e3ff-a6d7-4bfc-a89f-9c5909038163"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49f6624e-e903-477e-ab30-b4b6fe0e2b23"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93a0bd8d-6fdf-42b4-9767-697ce412b9b3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""E"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f68c61e2-7cfa-4e9c-b242-f3578492ce4d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Qued E"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2c3ac81-a0be-449d-9d92-b48d4c162ea9"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""T"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52b64e2f-a1d5-4c74-b75d-ed72cdcff8e7"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lock On Target"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""835b52a0-fc01-4880-9e3e-77c2963a95c1"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""F1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e432fd2-7bcf-408d-a904-e82a172ccd3d"",
                    ""path"": ""<Keyboard>/f2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""F2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""040e249b-b5aa-4316-ae49-3a9310616194"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f83307fb-be5c-49d7-8d5a-489a0430459d"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""_Q"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5082658-cfc9-4759-8fc8-f758c047c538"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold E"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1cacb97d-c20c-46a7-b0a1-2e185e05f7d4"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold T"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31f95bbf-6944-4350-a373-b5a52f03fd1d"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""_Hold Q"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player Quick Slot"",
            ""id"": ""c1e718d7-49ef-4049-9271-89fa8a190185"",
            ""actions"": [
                {
                    ""name"": ""Up Arrow"",
                    ""type"": ""Button"",
                    ""id"": ""36335efc-c8ba-4592-b763-d4eb080c6456"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down Arrow"",
                    ""type"": ""Button"",
                    ""id"": ""ff6ac904-aeea-4cc6-b909-366959c9e63f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Arrow"",
                    ""type"": ""Button"",
                    ""id"": ""4909dec5-671b-4268-9f4e-0c92fc72e14c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Arrow"",
                    ""type"": ""Button"",
                    ""id"": ""e4ee0ff4-a777-4012-840e-67a22dffe6a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d860de98-b307-42fa-978d-254e637e259f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down Arrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21285c32-a6af-46b3-95b1-c0f11eea6a5f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up Arrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f43bb2c9-d902-48e9-a54e-321294900913"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Arrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e43a10bf-f9cb-4e09-99f7-0c32ce92ea58"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Arrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player Movement
        m_PlayerMovement = asset.FindActionMap("Player Movement", throwIfNotFound: true);
        m_PlayerMovement_Movement = m_PlayerMovement.FindAction("Movement", throwIfNotFound: true);
        m_PlayerMovement_Camera = m_PlayerMovement.FindAction("Camera", throwIfNotFound: true);
        // Player Actions
        m_PlayerActions = asset.FindActionMap("Player Actions", throwIfNotFound: true);
        m_PlayerActions_Y = m_PlayerActions.FindAction("Y", throwIfNotFound: true);
        m_PlayerActions_F = m_PlayerActions.FindAction("F", throwIfNotFound: true);
        m_PlayerActions_Inventory = m_PlayerActions.FindAction("Inventory", throwIfNotFound: true);
        m_PlayerActions_LShift = m_PlayerActions.FindAction("LShift", throwIfNotFound: true);
        m_PlayerActions_Space = m_PlayerActions.FindAction("Space", throwIfNotFound: true);
        m_PlayerActions_C = m_PlayerActions.FindAction("C", throwIfNotFound: true);
        m_PlayerActions_Z = m_PlayerActions.FindAction("Z", throwIfNotFound: true);
        m_PlayerActions_X = m_PlayerActions.FindAction("X", throwIfNotFound: true);
        m_PlayerActions_TapX = m_PlayerActions.FindAction("Tap X", throwIfNotFound: true);
        m_PlayerActions_HoldE = m_PlayerActions.FindAction("Hold E", throwIfNotFound: true);
        m_PlayerActions_E = m_PlayerActions.FindAction("E", throwIfNotFound: true);
        m_PlayerActions_QuedE = m_PlayerActions.FindAction("Qued E", throwIfNotFound: true);
        m_PlayerActions_HoldT = m_PlayerActions.FindAction("Hold T", throwIfNotFound: true);
        m_PlayerActions_T = m_PlayerActions.FindAction("T", throwIfNotFound: true);
        m_PlayerActions_LockOnTarget = m_PlayerActions.FindAction("Lock On Target", throwIfNotFound: true);
        m_PlayerActions_F1 = m_PlayerActions.FindAction("F1", throwIfNotFound: true);
        m_PlayerActions_F2 = m_PlayerActions.FindAction("F2", throwIfNotFound: true);
        m_PlayerActions__HoldQ = m_PlayerActions.FindAction("_Hold Q", throwIfNotFound: true);
        m_PlayerActions__Q = m_PlayerActions.FindAction("_Q", throwIfNotFound: true);
        // Player Quick Slot
        m_PlayerQuickSlot = asset.FindActionMap("Player Quick Slot", throwIfNotFound: true);
        m_PlayerQuickSlot_UpArrow = m_PlayerQuickSlot.FindAction("Up Arrow", throwIfNotFound: true);
        m_PlayerQuickSlot_DownArrow = m_PlayerQuickSlot.FindAction("Down Arrow", throwIfNotFound: true);
        m_PlayerQuickSlot_RightArrow = m_PlayerQuickSlot.FindAction("Right Arrow", throwIfNotFound: true);
        m_PlayerQuickSlot_LeftArrow = m_PlayerQuickSlot.FindAction("Left Arrow", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Movement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_Movement;
    private readonly InputAction m_PlayerMovement_Camera;
    public struct PlayerMovementActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMovement_Movement;
        public InputAction @Camera => m_Wrapper.m_PlayerMovement_Camera;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Camera.started += instance.OnCamera;
            @Camera.performed += instance.OnCamera;
            @Camera.canceled += instance.OnCamera;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Camera.started -= instance.OnCamera;
            @Camera.performed -= instance.OnCamera;
            @Camera.canceled -= instance.OnCamera;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // Player Actions
    private readonly InputActionMap m_PlayerActions;
    private List<IPlayerActionsActions> m_PlayerActionsActionsCallbackInterfaces = new List<IPlayerActionsActions>();
    private readonly InputAction m_PlayerActions_Y;
    private readonly InputAction m_PlayerActions_F;
    private readonly InputAction m_PlayerActions_Inventory;
    private readonly InputAction m_PlayerActions_LShift;
    private readonly InputAction m_PlayerActions_Space;
    private readonly InputAction m_PlayerActions_C;
    private readonly InputAction m_PlayerActions_Z;
    private readonly InputAction m_PlayerActions_X;
    private readonly InputAction m_PlayerActions_TapX;
    private readonly InputAction m_PlayerActions_HoldE;
    private readonly InputAction m_PlayerActions_E;
    private readonly InputAction m_PlayerActions_QuedE;
    private readonly InputAction m_PlayerActions_HoldT;
    private readonly InputAction m_PlayerActions_T;
    private readonly InputAction m_PlayerActions_LockOnTarget;
    private readonly InputAction m_PlayerActions_F1;
    private readonly InputAction m_PlayerActions_F2;
    private readonly InputAction m_PlayerActions__HoldQ;
    private readonly InputAction m_PlayerActions__Q;
    public struct PlayerActionsActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Y => m_Wrapper.m_PlayerActions_Y;
        public InputAction @F => m_Wrapper.m_PlayerActions_F;
        public InputAction @Inventory => m_Wrapper.m_PlayerActions_Inventory;
        public InputAction @LShift => m_Wrapper.m_PlayerActions_LShift;
        public InputAction @Space => m_Wrapper.m_PlayerActions_Space;
        public InputAction @C => m_Wrapper.m_PlayerActions_C;
        public InputAction @Z => m_Wrapper.m_PlayerActions_Z;
        public InputAction @X => m_Wrapper.m_PlayerActions_X;
        public InputAction @TapX => m_Wrapper.m_PlayerActions_TapX;
        public InputAction @HoldE => m_Wrapper.m_PlayerActions_HoldE;
        public InputAction @E => m_Wrapper.m_PlayerActions_E;
        public InputAction @QuedE => m_Wrapper.m_PlayerActions_QuedE;
        public InputAction @HoldT => m_Wrapper.m_PlayerActions_HoldT;
        public InputAction @T => m_Wrapper.m_PlayerActions_T;
        public InputAction @LockOnTarget => m_Wrapper.m_PlayerActions_LockOnTarget;
        public InputAction @F1 => m_Wrapper.m_PlayerActions_F1;
        public InputAction @F2 => m_Wrapper.m_PlayerActions_F2;
        public InputAction @_HoldQ => m_Wrapper.m_PlayerActions__HoldQ;
        public InputAction @_Q => m_Wrapper.m_PlayerActions__Q;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Add(instance);
            @Y.started += instance.OnY;
            @Y.performed += instance.OnY;
            @Y.canceled += instance.OnY;
            @F.started += instance.OnF;
            @F.performed += instance.OnF;
            @F.canceled += instance.OnF;
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
            @LShift.started += instance.OnLShift;
            @LShift.performed += instance.OnLShift;
            @LShift.canceled += instance.OnLShift;
            @Space.started += instance.OnSpace;
            @Space.performed += instance.OnSpace;
            @Space.canceled += instance.OnSpace;
            @C.started += instance.OnC;
            @C.performed += instance.OnC;
            @C.canceled += instance.OnC;
            @Z.started += instance.OnZ;
            @Z.performed += instance.OnZ;
            @Z.canceled += instance.OnZ;
            @X.started += instance.OnX;
            @X.performed += instance.OnX;
            @X.canceled += instance.OnX;
            @TapX.started += instance.OnTapX;
            @TapX.performed += instance.OnTapX;
            @TapX.canceled += instance.OnTapX;
            @HoldE.started += instance.OnHoldE;
            @HoldE.performed += instance.OnHoldE;
            @HoldE.canceled += instance.OnHoldE;
            @E.started += instance.OnE;
            @E.performed += instance.OnE;
            @E.canceled += instance.OnE;
            @QuedE.started += instance.OnQuedE;
            @QuedE.performed += instance.OnQuedE;
            @QuedE.canceled += instance.OnQuedE;
            @HoldT.started += instance.OnHoldT;
            @HoldT.performed += instance.OnHoldT;
            @HoldT.canceled += instance.OnHoldT;
            @T.started += instance.OnT;
            @T.performed += instance.OnT;
            @T.canceled += instance.OnT;
            @LockOnTarget.started += instance.OnLockOnTarget;
            @LockOnTarget.performed += instance.OnLockOnTarget;
            @LockOnTarget.canceled += instance.OnLockOnTarget;
            @F1.started += instance.OnF1;
            @F1.performed += instance.OnF1;
            @F1.canceled += instance.OnF1;
            @F2.started += instance.OnF2;
            @F2.performed += instance.OnF2;
            @F2.canceled += instance.OnF2;
            @_HoldQ.started += instance.On_HoldQ;
            @_HoldQ.performed += instance.On_HoldQ;
            @_HoldQ.canceled += instance.On_HoldQ;
            @_Q.started += instance.On_Q;
            @_Q.performed += instance.On_Q;
            @_Q.canceled += instance.On_Q;
        }

        private void UnregisterCallbacks(IPlayerActionsActions instance)
        {
            @Y.started -= instance.OnY;
            @Y.performed -= instance.OnY;
            @Y.canceled -= instance.OnY;
            @F.started -= instance.OnF;
            @F.performed -= instance.OnF;
            @F.canceled -= instance.OnF;
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
            @LShift.started -= instance.OnLShift;
            @LShift.performed -= instance.OnLShift;
            @LShift.canceled -= instance.OnLShift;
            @Space.started -= instance.OnSpace;
            @Space.performed -= instance.OnSpace;
            @Space.canceled -= instance.OnSpace;
            @C.started -= instance.OnC;
            @C.performed -= instance.OnC;
            @C.canceled -= instance.OnC;
            @Z.started -= instance.OnZ;
            @Z.performed -= instance.OnZ;
            @Z.canceled -= instance.OnZ;
            @X.started -= instance.OnX;
            @X.performed -= instance.OnX;
            @X.canceled -= instance.OnX;
            @TapX.started -= instance.OnTapX;
            @TapX.performed -= instance.OnTapX;
            @TapX.canceled -= instance.OnTapX;
            @HoldE.started -= instance.OnHoldE;
            @HoldE.performed -= instance.OnHoldE;
            @HoldE.canceled -= instance.OnHoldE;
            @E.started -= instance.OnE;
            @E.performed -= instance.OnE;
            @E.canceled -= instance.OnE;
            @QuedE.started -= instance.OnQuedE;
            @QuedE.performed -= instance.OnQuedE;
            @QuedE.canceled -= instance.OnQuedE;
            @HoldT.started -= instance.OnHoldT;
            @HoldT.performed -= instance.OnHoldT;
            @HoldT.canceled -= instance.OnHoldT;
            @T.started -= instance.OnT;
            @T.performed -= instance.OnT;
            @T.canceled -= instance.OnT;
            @LockOnTarget.started -= instance.OnLockOnTarget;
            @LockOnTarget.performed -= instance.OnLockOnTarget;
            @LockOnTarget.canceled -= instance.OnLockOnTarget;
            @F1.started -= instance.OnF1;
            @F1.performed -= instance.OnF1;
            @F1.canceled -= instance.OnF1;
            @F2.started -= instance.OnF2;
            @F2.performed -= instance.OnF2;
            @F2.canceled -= instance.OnF2;
            @_HoldQ.started -= instance.On_HoldQ;
            @_HoldQ.performed -= instance.On_HoldQ;
            @_HoldQ.canceled -= instance.On_HoldQ;
            @_Q.started -= instance.On_Q;
            @_Q.performed -= instance.On_Q;
            @_Q.canceled -= instance.On_Q;
        }

        public void RemoveCallbacks(IPlayerActionsActions instance)
        {
            if (m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);

    // Player Quick Slot
    private readonly InputActionMap m_PlayerQuickSlot;
    private List<IPlayerQuickSlotActions> m_PlayerQuickSlotActionsCallbackInterfaces = new List<IPlayerQuickSlotActions>();
    private readonly InputAction m_PlayerQuickSlot_UpArrow;
    private readonly InputAction m_PlayerQuickSlot_DownArrow;
    private readonly InputAction m_PlayerQuickSlot_RightArrow;
    private readonly InputAction m_PlayerQuickSlot_LeftArrow;
    public struct PlayerQuickSlotActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerQuickSlotActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @UpArrow => m_Wrapper.m_PlayerQuickSlot_UpArrow;
        public InputAction @DownArrow => m_Wrapper.m_PlayerQuickSlot_DownArrow;
        public InputAction @RightArrow => m_Wrapper.m_PlayerQuickSlot_RightArrow;
        public InputAction @LeftArrow => m_Wrapper.m_PlayerQuickSlot_LeftArrow;
        public InputActionMap Get() { return m_Wrapper.m_PlayerQuickSlot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerQuickSlotActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerQuickSlotActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerQuickSlotActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerQuickSlotActionsCallbackInterfaces.Add(instance);
            @UpArrow.started += instance.OnUpArrow;
            @UpArrow.performed += instance.OnUpArrow;
            @UpArrow.canceled += instance.OnUpArrow;
            @DownArrow.started += instance.OnDownArrow;
            @DownArrow.performed += instance.OnDownArrow;
            @DownArrow.canceled += instance.OnDownArrow;
            @RightArrow.started += instance.OnRightArrow;
            @RightArrow.performed += instance.OnRightArrow;
            @RightArrow.canceled += instance.OnRightArrow;
            @LeftArrow.started += instance.OnLeftArrow;
            @LeftArrow.performed += instance.OnLeftArrow;
            @LeftArrow.canceled += instance.OnLeftArrow;
        }

        private void UnregisterCallbacks(IPlayerQuickSlotActions instance)
        {
            @UpArrow.started -= instance.OnUpArrow;
            @UpArrow.performed -= instance.OnUpArrow;
            @UpArrow.canceled -= instance.OnUpArrow;
            @DownArrow.started -= instance.OnDownArrow;
            @DownArrow.performed -= instance.OnDownArrow;
            @DownArrow.canceled -= instance.OnDownArrow;
            @RightArrow.started -= instance.OnRightArrow;
            @RightArrow.performed -= instance.OnRightArrow;
            @RightArrow.canceled -= instance.OnRightArrow;
            @LeftArrow.started -= instance.OnLeftArrow;
            @LeftArrow.performed -= instance.OnLeftArrow;
            @LeftArrow.canceled -= instance.OnLeftArrow;
        }

        public void RemoveCallbacks(IPlayerQuickSlotActions instance)
        {
            if (m_Wrapper.m_PlayerQuickSlotActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerQuickSlotActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerQuickSlotActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerQuickSlotActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerQuickSlotActions @PlayerQuickSlot => new PlayerQuickSlotActions(this);
    public interface IPlayerMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
    }
    public interface IPlayerActionsActions
    {
        void OnY(InputAction.CallbackContext context);
        void OnF(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnLShift(InputAction.CallbackContext context);
        void OnSpace(InputAction.CallbackContext context);
        void OnC(InputAction.CallbackContext context);
        void OnZ(InputAction.CallbackContext context);
        void OnX(InputAction.CallbackContext context);
        void OnTapX(InputAction.CallbackContext context);
        void OnHoldE(InputAction.CallbackContext context);
        void OnE(InputAction.CallbackContext context);
        void OnQuedE(InputAction.CallbackContext context);
        void OnHoldT(InputAction.CallbackContext context);
        void OnT(InputAction.CallbackContext context);
        void OnLockOnTarget(InputAction.CallbackContext context);
        void OnF1(InputAction.CallbackContext context);
        void OnF2(InputAction.CallbackContext context);
        void On_HoldQ(InputAction.CallbackContext context);
        void On_Q(InputAction.CallbackContext context);
    }
    public interface IPlayerQuickSlotActions
    {
        void OnUpArrow(InputAction.CallbackContext context);
        void OnDownArrow(InputAction.CallbackContext context);
        void OnRightArrow(InputAction.CallbackContext context);
        void OnLeftArrow(InputAction.CallbackContext context);
    }
}
